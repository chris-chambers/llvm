// FIXME: Add standard header.

#include "SbbmPasses.h"
#include "MCTargetDesc/SbbmMCTargetDesc.h"
#include "SbbmSubtarget.h"
#include "SbbmTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"

using namespace llvm;

namespace {

class SbbmDAGToDAGISel : public SelectionDAGISel {
public:
  explicit SbbmDAGToDAGISel(SbbmTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel)
  { }

  virtual const char *getPassName() const {
    return "SBBM DAG->DAG Pattern Instruction Selection";
  }

  virtual SDNode *Select(SDNode *N) override {
    if (N->isMachineOpcode()) {
      // Sometimes lowering produces ready-to-go machine opcodes.  If so, use
      // them directly.
      return N;
    }
    return SelectCode(N);
  }

  bool SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset) {
    EVT ValTy = Addr.getValueType();

    if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
      Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
      Offset = CurDAG->getTargetConstant(0, ValTy);
      return true;
    }

    if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
        Addr.getOpcode() == ISD::TargetGlobalAddress ||
        Addr.getOpcode() == ISD::TargetGlobalTLSAddress) {
      return false; // direct calls.
    }

    Base = Addr;
    Offset = CurDAG->getTargetConstant(0, ValTy);
    return true;
  }

private:
// Include the pieces autogenerated from the target description.
#include "SbbmGenDAGISel.inc"

};

} // anonymous namespace

FunctionPass *llvm::createSbbmISelDag(
  SbbmTargetMachine &TM, CodeGenOpt::Level OptLevel)
{
  return new SbbmDAGToDAGISel(TM, OptLevel);
}
